import {JSONSchema} from "json-schema-to-typescript";
import {compileSchema, SchemaDefinitions} from "./jsonschema";

const defs: SchemaDefinitions  = {
    sourceMap: {
        "/Common/Address": "/app/example/dist/src/model/values/Common/Address.ts",
        "/People/Person": "/app/example/dist/src/model/values/People/Person.ts",
        "/People/Friend": "/app/example/dist/src/model/values/People/Friend.ts",
        "/People/Home/Address": "/app/example/dist/src/model/values/People/Home/Address.ts",
    },
    definitions: {
        "Common": {
            "Address": {
                "type": "object",
                "properties": {
                    "street": {
                        "type": "string"
                    },
                    "city": {
                        "type": "string"
                    }
                },
                "required": [
                    "street",
                    "city"
                ],
                "additionalProperties": false,
                "title": "Address"
            }
        },
        "People": {
            "Home": {
                "Address": {
                    "type": "object",
                    "properties": {
                        "street": {
                            "type": "string"
                        },
                        "city": {
                            "type": "string"
                        }
                    },
                    "required": [
                        "street",
                        "city"
                    ],
                    "additionalProperties": false,
                    "title": "Address"
                }
            },
            "Person": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                }
            },
            "Friend": {
                "type": "object",
                "properties": {
                    "relation": {
                        "type": "string",
                        "enum": ["good", "best"]
                    },
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                }
            }
        }
    }
};

test("It compiles object schema", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "street": {
                type: "string"
            },
            "city": {
                type: "string"
            }
        },
        required: ["street", "city"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */


export interface Address {
    street: string;
    city: string;
}
`;

    compileSchema(schema, "Address", "/app/example/dist/src/model/values", defs)
    .then((content) => {
        expect(content).toEqual(expected);
        done();
    })
})

test("It compiles object schema with reference in common namespace", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "address": {
                "$ref": "#/definitions/Common/Address"
            }
        },
        required: ["name", "address"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Address} from "../Common/Address";

export interface Person {
    name: string;
    address: Address;
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with reference in sub namespace", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "home": {
                "$ref": "#/definitions/People/Home/Address"
            }
        },
        required: ["name", "home"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Address} from "./Home/Address";

export interface Person {
    name: string;
    home: Address;
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with reference in same namespace", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "friend": {
                "$ref": "#/definitions/People/Friend"
            }
        },
        required: ["name", "friend"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Friend} from "./Friend";

export interface Person {
    name: string;
    friend: Friend;
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with reference in sub object", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "home": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                },
                "additionalProperties": false,
                "required": ["address"]
            }
        },
        required: ["name", "home"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Address} from "../Common/Address";

export interface Person {
    name: string;
    home: {
        address: Address;
    };
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with conflicting reference types", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "work": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                },
                "additionalProperties": false,
                "required": ["address"]
            },
            "home": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/definitions/People/Home/Address"
                    }
                },
                "additionalProperties": false,
                "required": ["address"]
            }
        },
        required: ["name", "home", "work"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Address as CommonAddress} from "../Common/Address";
import {Address as PeopleHomeAddress} from "./Home/Address";

export interface Person {
    name: string;
    work: {
        address: CommonAddress;
    };
    home: {
        address: PeopleHomeAddress;
    };
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with same reference type used multiple times", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "work": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                },
                "additionalProperties": false,
                "required": ["address"]
            },
            "home": {
                "type": "object",
                "properties": {
                    "address": {
                        "$ref": "#/definitions/Common/Address"
                    }
                },
                "additionalProperties": false,
                "required": ["address"]
            }
        },
        required: ["name", "home", "work"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */

import {Address} from "../Common/Address";

export interface Person {
    name: string;
    work: {
        address: Address;
    };
    home: {
        address: Address;
    };
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It compiles object schema with nested object", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
            },
            "address": {
                type: "object",
                properties: {
                    "street": {
                        type: "string",
                    },
                    "city": {
                        type: "string",
                    }
                },
                additionalProperties: false,
                required: ["street", "city"]
            }
        },
        required: ["name", "address"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */


export interface Person {
    name: string;
    address: {
        street: string;
        city: string;
    };
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})

test("It ignores titles and ids", (done) => {
    const schema: JSONSchema = {
        type: "object",
        properties: {
            "name": {
                type: "string",
                title: "Name",
                id: "Name",
            },
            "address": {
                type: "object",
                title: "Address",
                properties: {
                    "street": {
                        type: "string",
                        title: "Street",
                        id: "Street"
                    },
                    "city": {
                        type: "string",
                        title: "City"
                    }
                },
                additionalProperties: false,
                required: ["street", "city"]
            }
        },
        required: ["name", "address"],
        additionalProperties: false
    };

    const expected = `/* tslint:disable */
/**
 * This file was automatically generated by proophboard/Cody.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source element on your prooph board,
 * and let Cody generate the file again.
 */


export interface Person {
    name: string;
    address: {
        street: string;
        city: string;
    };
}
`;

    compileSchema(schema, "Person", "/app/example/dist/src/model/values/People", defs)
        .then((content) => {
            expect(content).toEqual(expected);
            done();
        })
})
